/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.Mario.View;

import hr.Mario.Dall.Repository;
import hr.Mario.Dall.RepositoryFactory;
import hr.Mario.Model.Genre;
import hr.Mario.Model.Movie;
import hr.mario.view.model.MovieTableModel;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author mario
 */
public class MoviePanel extends javax.swing.JPanel {

    private Repository repository;
    private static final String DIR = "assets";
    private MovieTableModel movieModel;

    Map<JTextComponent, JLabel> validationFiels = new HashMap<>();

    private Movie selectedMovie;

    public MoviePanel() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfOriginNaziv = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfBeginDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnDeleteMovie = new javax.swing.JButton();
        btnUpdateMovie = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        lblIcon = new javax.swing.JLabel();
        lblTitleError = new javax.swing.JLabel();
        tfImagePath = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tfDescription = new javax.swing.JTextArea();
        lblPubDateError = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        lblOriginNazivError = new javax.swing.JLabel();
        lblDurationError = new javax.swing.JLabel();
        lblBeginDateError = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        lblImagePathError = new javax.swing.JLabel();
        spDuration = new javax.swing.JSpinner();
        cbGenre = new javax.swing.JComboBox<>();
        btnChoose = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jLabel1.setText("Title");

        jLabel2.setText("PubDate()");

        tfPubDate.setName("PubDate"); // NOI18N

        jLabel3.setText("Description");

        jLabel4.setText("Origin naziv");

        jLabel5.setText("Duration");

        jLabel6.setText("Begin Date(dd.MM.yyyy)");

        tfBeginDate.setName("BeginDate"); // NOI18N

        jLabel7.setText("Genre");

        btnDeleteMovie.setBackground(new java.awt.Color(255, 0, 51));
        btnDeleteMovie.setForeground(new java.awt.Color(0, 0, 0));
        btnDeleteMovie.setText("DELETE");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        btnUpdateMovie.setBackground(new java.awt.Color(255, 255, 51));
        btnUpdateMovie.setForeground(new java.awt.Color(0, 0, 0));
        btnUpdateMovie.setText("UPDATE");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnAddMovie.setBackground(new java.awt.Color(51, 255, 51));
        btnAddMovie.setForeground(new java.awt.Color(0, 0, 0));
        btnAddMovie.setText("ADD");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        lblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N
        lblIcon.setText("jLabel9");

        lblTitleError.setForeground(new java.awt.Color(255, 51, 51));

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbMovies);

        tfDescription.setColumns(20);
        tfDescription.setLineWrap(true);
        tfDescription.setRows(5);
        jScrollPane1.setViewportView(tfDescription);

        lblPubDateError.setForeground(new java.awt.Color(255, 51, 51));

        lblDescriptionError.setForeground(new java.awt.Color(255, 51, 51));

        lblOriginNazivError.setForeground(new java.awt.Color(255, 51, 51));

        lblDurationError.setForeground(new java.awt.Color(255, 51, 51));

        lblBeginDateError.setForeground(new java.awt.Color(255, 51, 51));

        jLabel16.setForeground(new java.awt.Color(255, 51, 51));

        lblImagePathError.setForeground(new java.awt.Color(255, 51, 51));

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDeleteMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDescriptionError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfBeginDate, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfOriginNaziv, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(cbGenre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfTitle)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPubDate, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPubDateError)
                                    .addComponent(lblTitleError)))
                            .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDurationError)
                            .addComponent(lblBeginDateError)
                            .addComponent(lblOriginNazivError)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 219, Short.MAX_VALUE)
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(btnChoose)
                        .addGap(61, 61, 61)
                        .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(lblImagePathError)))
                .addGap(26, 26, 26))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblImagePathError)
                            .addComponent(btnChoose))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTitleError))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPubDateError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblDescriptionError)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(tfOriginNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblOriginNazivError)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(65, 65, 65))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDurationError)
                                    .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfBeginDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblBeginDateError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(cbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(77, 77, 77)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddMovie)
                            .addComponent(btnUpdateMovie))
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteMovie)
                        .addGap(56, 56, 56)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //String Title, LocalDateTime PubDate, String Description, String OriginNaziv, Genre Genre, int Duration, String ImagePath, LocalDate BeginDate

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed

        if (formValid()) {
            Movie movie = new Movie(
                    tfTitle.getText().trim(),
                    //                    LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER_PUBDATE),
                    tfPubDate.getText().trim(),
                    tfDescription.getText().trim(),
                    tfOriginNaziv.getText().trim(),
                    (Genre) cbGenre.getSelectedItem(),
                    (Integer) spDuration.getValue(),
                    tfImagePath.getText().trim(),
                    LocalDate.parse(tfBeginDate.getText().trim(), Movie.DATE_FORMATTER_BEGINDATE)
            );
            try {
                repository.createMovie(movie);
                MessageUtils.showInformationMessage("Success", "Movie is added");
                movieModel.setMovies(repository.GetMovies());
            } catch (Exception ex) {
                Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete movie?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getImagePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getImagePath()));
                }

                repository.deleteMovie(selectedMovie.getId());
                movieModel.setMovies(repository.GetMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        showMovie();
    }//GEN-LAST:event_formKeyReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to update");
            return;
        }
        if (formValid()) {
            try {
                if (!tfImagePath.getText().trim().equals(selectedMovie.getImagePath())) {
                    if (selectedMovie.getImagePath() != null) {
                        Files.deleteIfExists(Paths.get(selectedMovie.getImagePath()));
                    }
                    String localPicturePath = uploadPicture();
                    selectedMovie.setImagePath(localPicturePath);
                }

                selectedMovie.setTitle(tfTitle.getText().trim());
//                selectedMovie.setPubDate(LocalDateTime.parse(tfPubDate.getText().trim(),Movie.DATE_FORMATTER_PUBDATE));
                selectedMovie.setPubDate(tfPubDate.getText().trim());
                selectedMovie.setDescription(tfDescription.getText().trim());
                selectedMovie.setDuration((Integer) spDuration.getValue());
                selectedMovie.setBeginDate(LocalDate.parse(tfBeginDate.getText().trim(), Movie.DATE_FORMATTER_BEGINDATE));
                selectedMovie.setOriginNaziv(tfOriginNaziv.getText().trim());
                selectedMovie.setGenre((Genre) cbGenre.getSelectedItem());

                repository.updateMovie(selectedMovie.getId(), selectedMovie);
                movieModel.setMovies(repository.GetMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update movie!");
            }

    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    }
    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfImagePath.setText(file.getAbsolutePath());
        setIcon(lblIcon, file);
    }//GEN-LAST:event_btnChooseActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JComboBox<Genre> cbGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBeginDateError;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblDurationError;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblImagePathError;
    private javax.swing.JLabel lblOriginNazivError;
    private javax.swing.JLabel lblPubDateError;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JSpinner spDuration;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfBeginDate;
    private javax.swing.JTextArea tfDescription;
    private javax.swing.JTextField tfImagePath;
    private javax.swing.JTextField tfOriginNaziv;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {

        try {
            initValidation();
            initRepository();
            initGenre();
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void initRepository() {
        repository = RepositoryFactory.GetRepository();
    }

    private boolean formValid() {
        boolean ok = true;

        for (Map.Entry<JTextComponent, JLabel> validation : validationFiels.entrySet()) {
            ok &= !validation.getKey().getText().trim().isEmpty();
            validation.getValue().setText(validation.getKey().getText().trim().isEmpty() ? "X" : "");

            if ("BeginDate".equals(validation.getKey().getName())) {

                try {
                    LocalDate.parse(validation.getKey().getText().trim(), Movie.DATE_FORMATTER_BEGINDATE);
                    validation.getValue().setText("");
                } catch (Exception e) {
                    ok = false;
                    validation.getValue().setText("X");
                }
            }

        }

        return ok;

    }

    private void initGenre() throws Exception {

        DefaultComboBoxModel<Genre> genreModel = new DefaultComboBoxModel<>();
        List<Genre> genres = repository.GetGenres();
        genres.forEach(genreModel::addElement);
        cbGenre.setModel(genreModel);

    }

    private void showMovie() {
        clearForm();

        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.getMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }

    }

    private void initTable() throws Exception {

        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);

        movieModel = new MovieTableModel(repository.GetMovies());
        tbMovies.setModel(movieModel);

    }

    private void clearForm() {

        tfTitle.setText("");
        tfBeginDate.setText("");
        tfDescription.setText("");
        tfOriginNaziv.setText("");
        tfImagePath.setText("");
        tfPubDate.setText("");
        spDuration.setValue(0);
    }

    private void fillForm(Movie selectedMovie) {

        if (selectedMovie.getImagePath() != null && Files.exists(Paths.get(selectedMovie.getImagePath()))) {
            tfImagePath.setText(selectedMovie.getImagePath());
            setIcon(lblIcon, new File(selectedMovie.getImagePath()));
        } else {
            lblIcon.setIcon(new ImageIcon(getClass().getResource("/assets/no_image.jpeg")));
        }

        tfTitle.setText(selectedMovie.getTitle());
//      tfPubDate.setText(selectedMovie.getPubDate().format(Movie.DATE_FORMATTER_PUBDATE));
        tfPubDate.setText(selectedMovie.getPubDate());
        tfDescription.setText(selectedMovie.getDescription());
        tfOriginNaziv.setText(selectedMovie.getOriginNaziv());
        spDuration.setValue(selectedMovie.getDuration());
        tfBeginDate.setText(selectedMovie.getBeginDate().format(Movie.DATE_FORMATTER_BEGINDATE));
        

    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private String uploadPicture() throws IOException {
        String picturePath = tfImagePath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    private void initValidation() {

        validationFiels.put(tfTitle, lblTitleError);
        validationFiels.put(tfPubDate, lblPubDateError);
        validationFiels.put(tfDescription, lblDescriptionError);
        validationFiels.put(tfOriginNaziv, lblOriginNazivError);
        validationFiels.put(tfBeginDate, lblBeginDateError);
        validationFiels.put(tfImagePath, lblImagePathError);

    }
}
